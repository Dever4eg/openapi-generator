/*
 * OpenAPI Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.EquilateralTriangle;
import org.openapitools.client.model.IsoscelesTriangle;
import org.openapitools.client.model.ScaleneTriangle;

import javax.ws.rs.core.GenericType;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
//@JsonDeserialize(using = Triangle.TriangleDeserializer.class)
//@JsonSerialize(using = Triangle.TriangleSerializer.class)
public class Triangle extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(Triangle.class.getName());

    public static class CustomSerializer implements JsonSerializer<Triangle> {
        public JsonElement serialize(Triangle obj, Type type, JsonSerializationContext jsonSerializationContext) {
            if (obj == null) {
                return null;
            }

            return new JsonPrimitive(JSON.getGson().toJson(obj.getActualInstance()));
        }
    }

    public static class CustomDeserializer implements JsonDeserializer<Triangle> {

        @Override
        public Triangle deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
           Object deserialized = null;
           int match = 0;

        //@Override
        //public Triangle deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {
        /*    JsonNode tree = jp.readValueAsTree();
            Object deserialized = null;
            //boolean typeCoercion = ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS);
            int match = 0;
            JsonToken token = tree.traverse(jp.getCodec()).nextToken(); */
            // deserialize EquilateralTriangle
            try {
                deserialized = JSON.getGson().fromJson(json.toString(), EquilateralTriangle.class);

                //deserialized = tree.traverse(jp.getCodec()).readValueAs(EquilateralTriangle.class);
                match++;
                log.log(Level.FINER, "Input data matches schema 'EquilateralTriangle'");
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'EquilateralTriangle'", e);
            }

            // deserialize IsoscelesTriangle
            try {
                deserialized = JSON.getGson().fromJson(json.toString(), IsoscelesTriangle.class);

                //deserialized = tree.traverse(jp.getCodec()).readValueAs(IsoscelesTriangle.class);
                match++;
                log.log(Level.FINER, "Input data matches schema 'IsoscelesTriangle'");
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'IsoscelesTriangle'", e);
            }

            // deserialize ScaleneTriangle
            try {
                deserialized = JSON.getGson().fromJson(json.toString(), ScaleneTriangle.class);

                //deserialized = tree.traverse(jp.getCodec()).readValueAs(ScaleneTriangle.class);
                match++;
                log.log(Level.FINER, "Input data matches schema 'ScaleneTriangle'");
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'ScaleneTriangle'", e);
            }

            if (match == 1) {
                Triangle ret = new Triangle();
                ret.setActualInstance(deserialized);
                return ret;
            }
            throw new JsonParseException(String.format("Failed deserialization for Triangle: %d classes match result, expected 1", match));
        }

        /**
         * Handle deserialization of the 'null' value.
         */
/*
        @Override
        public Triangle getNullValue(DeserializationContext ctxt) throws JsonMappingException {
            throw new JsonMappingException(ctxt.getParser(), "Triangle cannot be null");
        }
*/
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public Triangle() {
        super("oneOf", Boolean.FALSE);
    }
/*  */
    public Triangle(EquilateralTriangle o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public Triangle(IsoscelesTriangle o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public Triangle(ScaleneTriangle o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("EquilateralTriangle", new GenericType<EquilateralTriangle>() {
        });
        schemas.put("IsoscelesTriangle", new GenericType<IsoscelesTriangle>() {
        });
        schemas.put("ScaleneTriangle", new GenericType<ScaleneTriangle>() {
        });
        //JSON.registerDescendants(Triangle.class, Collections.unmodifiableMap(schemas));
        // Initialize and register the discriminator mappings.
        Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
        mappings.put("EquilateralTriangle", EquilateralTriangle.class);
        mappings.put("IsoscelesTriangle", IsoscelesTriangle.class);
        mappings.put("ScaleneTriangle", ScaleneTriangle.class);
        mappings.put("Triangle", Triangle.class);
        //JSON.registerDiscriminator(Triangle.class, "triangleType", mappings);
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return Triangle.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * EquilateralTriangle, IsoscelesTriangle, ScaleneTriangle
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof EquilateralTriangle) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof IsoscelesTriangle) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ScaleneTriangle) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be EquilateralTriangle, IsoscelesTriangle, ScaleneTriangle");
    }

    /**
     * Get the actual instance, which can be the following:
     * EquilateralTriangle, IsoscelesTriangle, ScaleneTriangle
     *
     * @return The actual instance (EquilateralTriangle, IsoscelesTriangle, ScaleneTriangle)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `EquilateralTriangle`. If the actual instance is not `EquilateralTriangle`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EquilateralTriangle`
     * @throws ClassCastException if the instance is not `EquilateralTriangle`
     */
    public EquilateralTriangle getEquilateralTriangle() throws ClassCastException {
        return (EquilateralTriangle)super.getActualInstance();
    }

    /**
     * Get the actual instance of `IsoscelesTriangle`. If the actual instance is not `IsoscelesTriangle`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `IsoscelesTriangle`
     * @throws ClassCastException if the instance is not `IsoscelesTriangle`
     */
    public IsoscelesTriangle getIsoscelesTriangle() throws ClassCastException {
        return (IsoscelesTriangle)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ScaleneTriangle`. If the actual instance is not `ScaleneTriangle`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ScaleneTriangle`
     * @throws ClassCastException if the instance is not `ScaleneTriangle`
     */
    public ScaleneTriangle getScaleneTriangle() throws ClassCastException {
        return (ScaleneTriangle)super.getActualInstance();
    }

}

